@model HomeModel

<style>

    body, html {
        height: 100%;
    }

    html {
        overflow: hidden;
    }

    body {
        overflow: scroll;
    }

    .bg { 
        background-image: url("../../Images/RSG-1.jpg");
        height: 100%; 
        background-position: center;
        background-repeat: no-repeat;
        background-size: cover;
    }

    .formContainer {
        width: 100%;
    }

    @@media screen and (max-width: 1150px) {
        <!--.formContainer {
            width: 30%;
        }-->
    }
    
    .inputDetails {
        padding-top: 20px;
    }
    
    .songName {
        padding: 5px 20px 5px 10px;
        margin: 0;
    }

    table.playlist {
        width: 50%;
        border: 5px solid #D3D3D3;
    }

    @@media screen and (max-width: 1150px) {
        table.playlist {
            width: 100%;
        }
    }
    
    .table-striped > tbody > tr:nth-of-type(odd) {
        background-color: #f9f9f9;
    }
    
    .table-striped > tbody > tr:nth-of-type(even) {
        background-color: #fff;
    }

    th, td {
        valign: middle;
        width: 50%;
    }

    .formSpacer {
        padding-left: 20px;
    }

    .songCount {
        text-align: center;
    }
    
</style>

<div class="inputDetails">
@{
    using (Html.BeginForm("Post", "Home", FormMethod.Post))
    {
        <div class="formContainer">
        
            <label for="txtArtist">Artist Name</label>
            @Html.TextBoxFor(m => m.ArtistName, new { id = "txtArtist" })
            <span class="formSpacer"></span>
        
            <label for="txtMaxConcerts">Maximum concerts to include</label>
            @Html.TextBoxFor(m => m.ConcertCount, new { id = "txtMaxConcerts" })
            <span class="formSpacer"></span>
        
            <button type="submit" class="btn btn-success">Go</button>
        
            @if (Model.ArtistFound.HasValue && Model.ArtistFound.Value == false) {
                <p>
                    No artist found with that name!
                </p>
            }

            @if (Model.SongsFound.HasValue && Model.SongsFound.Value == false) {
                <p>
                    No songs found!
                </p>
            }
        
        </div>
    }
}
</div>

@if (Model.SongsFound.HasValue && Model.SongsFound.Value == true) {
    <br />
    <hr />  
    <div class="outputDetails">
        <p>
            Here's a playlist of songs @Model.ArtistName might play, based on the last @Model.ActualCount concerts 
            @(Model.ActualCount < Model.ConcertCount ? "(that's all there is!)" : ""):
        </p>
    
        @using (Html.BeginForm("Spotify", "Home", FormMethod.Post))
        {
            <button type="submit" class="btn btn-success">Create Spotify Playlist</button>

            @if (!string.IsNullOrWhiteSpace(Model.Url))
            {
                <span>Playlist created! Here you go: <a href=@Model.Url> @Model.ArtistName </a> </span>
            }
        }
    
        <br />

        <table class="playlist table-striped">
            <tr>
                <th class="songName">Song Name</th>
                <th class="songCount">Times Played</th>
            </tr>
            
            @foreach (var song in Model.Songs) {
            
            <tr>
                <td class="songName">@song.Name</td>
                <td class="songCount">@(song.DuplicateCount + 1) / @Model.ActualCount</td>
            </tr>
            
            }
        </table>
    </div>
}